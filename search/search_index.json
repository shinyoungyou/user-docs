{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome! \ud83d\udc4b This documentation will guide you through essential features of Visual Studio Code (VS Code), a powerful and popular code editor designed for building and debugging modern web and software applications.</p> <p>Our goal is to help you effectively utilize VS Code's debugging tools, seamlessly integrate your work with GitHub for collaboration, and optimize your coding workflow with powerful editing features and shortcuts.</p> <p>Visual Studio Code is an open-source, lightweight, and highly customizable code editor developed by Microsoft. It supports various languages and frameworks, provides built-in support for Git and debugging, and has an extensive library of extensions that enhance productivity.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This guide is intended for:</p> <ul> <li>Developers who are already using VS Code and want to make better use of VS Code features.</li> <li>Users looking to improve their coding efficiency by learning best practices for debugging and code management in VS Code.</li> <li>Beginner to intermediate Python developers on Windows who want to work more efficiently using GitHub and VS Code.</li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>This documentation assumes you have:</p> <ul> <li>A basic understanding of programming concepts (e.g., loops, arrays).</li> <li>Experience working with Python, including using it within the VS Code environment.</li> <li>The Python extension installed in VS Code.</li> <li>Knowledge of how to open a project folder and create new files in VS Code.</li> <li>Understanding of how to configure the Python debugger in VS Code.</li> <li>Basic frontend development experience with HTML.</li> <li>A GitHub account and foundational knowledge of Git/version control systems.</li> <li>A Windows operating system.</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<p>Ensure you have the following installed before proceeding:</p> <ul> <li>Visual Studio Code (latest version recommended)</li> <li>Git</li> </ul> <p>While screenshots and examples will primarily use VS Code, the principles taught are applicable to other IDEs that support similar debugging tools and Git integrations.</p>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>The main sections covered in this documentation include:</p> <ul> <li>Debugging</li> <li>Connecting to GitHub</li> <li>Editing Code Efficiently</li> </ul>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>These instructions use the following typographic conventions: </p> Convention Explanation Examples Commands &amp; Actions: Bolded verbs are commands or actions you need to perform for instructions. Click, Type, Choose, Create UI element names (e.g. button names): double quoted \"Run and Debug\", \"&lt;&gt; Code\" Instructions that require you to run a command in terminal run some command in the terminal"},{"location":"#admonitions","title":"Admonitions","text":"<p>This guide uses success, warning, and note messages to provide additional information for instruction steps.</p> <p>Warning</p> <p>Warning provides information about instructions that can cause errors.</p> <p>Note</p> <p>Note provides additional information for a step.</p> <p>Success</p> <p>Success provides information about the success outcome of instructions.</p>"},{"location":"pages/code/","title":"Editing Code Efficiently in VS Code","text":""},{"location":"pages/code/#overview","title":"Overview","text":"<p>In this section, we will talk about editing code efficiently in VS Code. This guide shows how to make your HTML editing faster and smarter using features, such as multi-cursor editing, quickly closing multiple tabs, and fast file searching. These tips will help you save time, reduce repetitive work, and focus on more creative and meaningful tasks in your projects.</p>"},{"location":"pages/code/#using-multi-cursor-for-faster-code-editing","title":"Using Multi-Cursor for Faster Code Editing","text":"<p>This set shows how to use the multi-cursor feature in two common scenarios:</p> <ul> <li>Scenario 1: Renaming Repeated Code Changing a repeated class name across multiple HTML elements.</li> <li>Scenario 2: Placing Multi-Cursor Adding an attribute to each list item in a simple HTML list.</li> </ul>"},{"location":"pages/code/#scenario-1-renaming-repeated-code","title":"Scenario 1: Renaming Repeated Code","text":"<ol> <li> <p>Copy and paste the following HTML structure into a new file (e.g., <code>index.html</code>): <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n  &lt;title&gt;Example 1: Renaming Repeated Code&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;This is a simple component.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;This is a simple component.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;This is a simple component.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;This is a simple component.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> You now have multiple <code>&lt;div class=\"card\"&gt;</code> elements. Let's say you want to change the class name <code>card</code> to <code>box</code>.</p> </li> <li> <p>To select the text to edit, highlight the first occurrence of the word <code>card</code>.</p> <p>Warning</p> <p>Ensure that only the intended words are selected to prevent unwanted edits.</p> </li> <li> <p>While holding down <code>Ctrl</code>, press <code>D</code> repeatedly to select the next matching word each time.</p> <p> </p> <p>Notes</p> <p>Alternatively, press <code>Ctrl</code> + <code>Shift</code> + <code>L</code> to select all matching words in the file at once.</p> <p> </p> </li> <li> <p>Type <code>box</code>. All selected words will change at the same time.</p> <p> </p> </li> </ol>"},{"location":"pages/code/#scenario-2-place-multi-cursor","title":"Scenario 2: Place Multi-Cursor","text":"<ol> <li>Copy and paste the following HTML structure into a new or existing file (e.g., <code>index.html</code>). <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Example 2: Place Multi-Cursor&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Apple&lt;/li&gt;\n        &lt;li&gt;Banana&lt;/li&gt;\n        &lt;li&gt;Orange&lt;/li&gt;\n        &lt;li&gt;Mango&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Now, you want to add <code>class=\"item\"</code> to each <code>&lt;li&gt;</code> tag.</li> <li> <p>Click directly between the <code>li</code> and <code>&gt;</code> of the first <code>&lt;li&gt;</code> tag where you want to insert the attribute.</p> <p>Warning</p> <p>Make sure your cursors are positioned correctly. Incorrect placement may result in malformed HTML.</p> </li> <li> <p>While holding down the <code>Ctrl</code> + <code>Alt</code> keys, press the down arrow key (<code>\u2193</code>) repeatedly.</p> </li> <li> <p>Type <code>class=\"item\"</code>.</p> <p>Each element will have the class attribute set to <code>item</code>.</p> <p> </p> </li> </ol>"},{"location":"pages/code/#quickly-close-multiple-tabs","title":"Quickly Close Multiple Tabs","text":"<p>When you have many open tabs, VS Code gives you easy ways to close tabs without doing it one by one, so you can clean up your editor quickly and get back to coding.</p> <ol> <li>Right-click on any open tab.</li> <li> <p>Choose a Tab Closing Option:</p> <ul> <li><code>Close</code>: Closes the current tab.</li> <li><code>Close Others</code>: Closes all tabs except the active one.</li> <li><code>Close to the Right</code>: Closes all tabs to the right of the current tab.</li> <li><code>Close to the Left</code>: Closes all tabs to the left of the current tab.</li> <li><code>Close All</code>: Closes every open tab.</li> </ul> <p> </p> </li> </ol>"},{"location":"pages/code/#open-files-quickly-by-searching","title":"Open Files Quickly by Searching","text":"<p>Finding files in large projects can be time-consuming.  If you can\u2019t remember the exact location, use \"Quick Open\" to locate your files instantly.</p> <ol> <li>Press <code>Ctrl</code> + <code>P</code> to open the \"Quick Open\" dialog.</li> <li> <p>Type part of the file name you are looking for.</p> <p>VS Code will display a list of matching files, including those recently or frequently opened.</p> <p>Note</p> <p>The more specific you are with the file name, the quicker you\u2019ll find the file you need.</p> </li> <li> <p>Use  the arrow keys (<code>\u2191</code> / <code>\u2193</code>) to navigate the list, then press <code>Enter</code> to open the file.</p> <p> </p> </li> </ol> <p>Success</p> <p>Using the \"Quick Open\" is much faster than browsing through the folder structure manually!</p>"},{"location":"pages/code/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned the following:</p> <p>  How to use multi-cursor editing to modify code simultaneously</p> <p> How to quickly manage multiple tabs for a cleaner workspace</p> <p> How to use fast file search to open files efficiently</p>"},{"location":"pages/connect-github/","title":"Connecting to GitHub","text":""},{"location":"pages/connect-github/#overview","title":"Overview","text":"<p>In this section, we will explore how to connect VS Code to GitHub seamlessly. This guide demonstrates how to connect GitHub to your VS Code workflow, allowing you to manage repositories, commit changes, and push code directly from the editor. By following these steps, you'll streamline version control and enhance collaboration, enabling you to focus on building projects. Let's start by creating repository, and there are two way to create repository.</p>"},{"location":"pages/connect-github/#option-1-creating-repository-in-vs-code","title":"Option 1: Creating Repository In VS Code","text":"<p>In this option, we assume that you already know how to create a new empty folder on your computer. </p>"},{"location":"pages/connect-github/#open-a-folder-and-create-a-file","title":"Open a folder and Create a file","text":"<ol> <li> <p>Click the first icon (Explorer section) in the left navigation, and open a folder you want to save files.</p> <p> </p> </li> <li> <p>In the Explorer section, click the single paper icon (New File...) to create a new file.</p> <p> </p> </li> </ol> <p>Success</p> <p>The folder has been opened and the new file has been created.</p>"},{"location":"pages/connect-github/#custom-anchor","title":"Open a new terminal and Type commands","text":"<ol> <li> <p>In the top navigation, click the terminal option and the new terminal.</p> <p> </p> </li> <li> <p>Type the command below to initialize a local Git repository in the terminal</p> <p>git init</p> </li> </ol> <p>Success</p> <p>The new terminal has been opened and some commands have been written.</p>"},{"location":"pages/connect-github/#create-a-github-repository-in-vs-code","title":"Create a GitHub repository in VS Code","text":"<ol> <li> <p>Click the third icon (Source Control) in the left navigation</p> <p> </p> </li> <li> <p>Click the Publish Branch button</p> <p> </p> <p>Warning</p> <p>If you can't find the \"Publish Branch\" button, please check the Troubleshooting section.</p> </li> <li> <p>Click the Allow button, and sign in using GitHub</p> <p> </p> </li> <li> <p>Choose whether to make the repository public or private</p> </li> </ol> <p>Success</p> <p>The new GitHub repository has been created.</p> <p></p>"},{"location":"pages/connect-github/#option-2-creating-repository-on-github","title":"Option 2: Creating Repository on GitHub","text":""},{"location":"pages/connect-github/#create-a-new-repository-on-github","title":"Create a new repository on GitHub","text":"<ol> <li> <p>Open the GitHub and sign in</p> <p> </p> </li> <li> <p>Choose Your repositories section by clicking your profile image and click the green \"New\" button</p> <p> </p> </li> <li> <p>Write a new repository name and check the Add a README file section</p> <p> </p> <p>Note</p> <p>If you want to make the repository private, choose the \"private\" option</p> </li> <li> <p>Click the green \"Create repository\" button in the bottom</p> <p> </p> <p>Success</p> <p>The new GitHub repository has been created on Github.</p> </li> </ol>"},{"location":"pages/connect-github/#clone-the-github-repository-in-vs-code","title":"Clone the GitHub repository in VS Code","text":"<ol> <li> <p>Click the green \"&lt;&gt; Code\" button</p> <p> </p> </li> <li> <p>Click the icon highlighted in the red box below to copy the link</p> <p> </p> </li> <li> <p>In VS Code, open a new terminal and type the command below to clone the GitHub repository</p> <p>git clone THE COPIED LINK FROM GITHUB</p> <p>Note</p> <p>If you don't know how to open a new terminal, click the sentence below.  Open a new terminal and Type commands</p> <p>Success</p> <p>The GitHub repository has been cloned to VS Code.</p> </li> </ol> <p></p>"},{"location":"pages/connect-github/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned the following:</p> <p> How to create a new GitHub repository directly in VS Code</p> <p> How to clone a GitHub repository from GitHub</p> <p></p>"},{"location":"pages/debugging/","title":"Debugging in VS Code","text":""},{"location":"pages/debugging/#overview","title":"Overview","text":"<p>In this section, we will talk about how to debug your Python code using VS Code. Whether you are a beginner or looking to refine your debugging skills, this guide provides step-by-step instructions on configuring breakpoints, and using debugging features like \"Step Into\", \"Step Over,\" and \"Step Out\". By following this guide, you\u2019ll learn how to inspect variables, understand function internals, and troubleshoot your code effectively.</p> <p>Notes</p> <p>As it's listed as a prerequisite, we\u2019ve intentionally left out Python debugger configuration to focus solely on functional debugging. If you\u2019re unfamiliar with setting up the debugger, we recommend reviewing the official VS Code documentation before proceeding.</p>"},{"location":"pages/debugging/#enter-the-code-example","title":"Enter the Code Example","text":"<ol> <li> <p>Copy and paste the following code into a new file (e.g., <code>simple_debug.py</code>): <pre><code>def add(a, b):\n    sum = a + b\n    return sum\n\ndef multiply(x, y):\n    result = 0\n    for i in range(y):\n        result = add(result, x)\n    return result\n\ndef main():\n    num1 = 4\n    num2 = 3\n    product = multiply(num1, num2)\n    print(\"Product is:\", product)\n\nmain()\n</code></pre></p> <p>Note</p> <p>This code defines three functions:</p> <ul> <li><code>add()</code>: Adds two numbers.</li> <li><code>multiply()</code>: Uses repeated addition to multiply two numbers.</li> <li><code>main()</code>: Calls <code>multiply()</code> and prints the result.</li> </ul> </li> </ol>"},{"location":"pages/debugging/#open-the-debug-panel","title":"Open the Debug panel","text":"<ol> <li> <p>Click the \"Run and Debug\" icon (the bug icon) on the left sidebar.</p> <p>Shortcut</p> <p>Alternatively, press <code>Ctrl</code> + <code>Shift</code> + <code>D</code>. </p> </li> </ol>"},{"location":"pages/debugging/#set-breakpoints","title":"Set Breakpoints","text":"<p>We will set a breakpoint at the line <code>result = add(result, x)</code> inside the <code>multiply()</code> function to see when the <code>add()</code> function is called.</p> <ol> <li>Move your mouse over the left side of the line numbers. You\u2019ll see a dim red dot appear. </li> <li>Click the dim red dot to set a breakpoint (it turns into a solid red dot).</li> </ol> <p>Note</p> <p>Breakpoints allow you to pause your program at specific lines to see what is happening.</p>"},{"location":"pages/debugging/#start-debugging","title":"Start Debugging","text":"<ol> <li>Click the \"Run and Debug\" button at the top of the Debug panel. Your code will run and pause at the breakpoint.</li> </ol>"},{"location":"pages/debugging/#inspect-variables","title":"Inspect Variables","text":"<p>Inspecting variables helps you quickly identify where issues may occur in your code.</p> <ol> <li> <p>There are two options to inspect variables. </p> <ul> <li>Option 1: Variables sectionWhen the code pauses at a breakpoint, you can see the current values of your variables in the Variables section on the left side of the Debug panel. </li> <li>Option 2: Inline codeYou can also see the current values for variables (like <code>i</code> and <code>y</code>) displayed inline in the code, making it easy to track them as you step through.</li> </ul> <p> </p> </li> </ol>"},{"location":"pages/debugging/#step-into-see-inside-a-function","title":"Step Into: See Inside a Function","text":"<p>Use the \"Step Into\" to understand how each function works.</p> <ol> <li> <p>Click the \"Step Into\" button (down arrow icon) when you reach the line <code>result = add(result, x)</code> in the <code>multiply()</code> function.</p> <p>VS Code will take you inside the <code>add()</code> function. </p> </li> <li> <p>When you\u2019re inside <code>add()</code>, click \"Step Into\" again to move to the next line.</p> <p>Since the function is short, it may return quickly and take you back to the <code>multiply()</code> function right away.</p> </li> </ol> <p>Notes</p> <p>Once the inner function finishes, you will be taken back to the point where it was called.</p> <p>Now you can see how the values <code>a</code> and <code>b</code> are added together.</p>"},{"location":"pages/debugging/#step-out-exit-the-current-function","title":"Step Out: Exit the Current Function","text":"<p>Use the \"Step Out\" when you have finished inspecting a function\u2019s internal behavior and want to resume higher-level execution.</p> <ol> <li> <p>Click the \"Step Out\" button (up arrow icon) if you are inside a function (<code>add()</code>) and want to return to the function that called it. </p> <p>The \"Step Out\" will finish the current function and take you back to the previous level in your code.</p> </li> <li> <p>Click \"Step Out\" again after returning to the calling function.</p> <p>The debugger will continue running until the current function finishes or it hits another breakpoint.</p> </li> </ol> <p>Notes</p> <p>If there are no more breakpoints, the program may run to the end and exit.</p>"},{"location":"pages/debugging/#step-over-skip-the-function-details","title":"Step Over: Skip the Function Details","text":"<p>Use the \"Step Over\" when you want to focus on the current function and skip over lower-level details.</p> <ol> <li> <p>Click the \"Step Over\" button (curved arrow icon) to quickly move to the next line, rather than watching the details inside the <code>add()</code> function. </p> <p>The \"Step Over\" will execute the <code>add()</code> function but not show its inner workings.</p> </li> <li> <p>Click \"Step Over\" again.</p> <p>The debugger will continue to the next line in the current function, executing one line at a time.</p> </li> </ol> <p>Warning</p> <p>The \"Step Over\" won\u2019t let you see a function\u2019s internal operations. Use it when you\u2019re confident that the function works as expected, or when you want to move through your code efficiently.</p>"},{"location":"pages/debugging/#finish-debugging","title":"Finish Debugging","text":"<p>If your program finishes running during debugging, you\u2019ll see the final output (<code>Product is: 12</code>) in the terminal.</p> <p>However, if you\u2019ve already found what you were looking for before the program ends, you can terminate the session at any time.</p> <ol> <li> <p>Click the stop button (red square) to end the debugging session.</p> <p>The session will end immediately without executing the remaining code, and you will not see the final output.</p> </li> </ol> <p>Success</p> <p>Debugging is complete. If you saw the expected output, your code is functioning correctly. If you stopped early, but confirmed the behavior you were checking, then your debugging was also successful!</p>"},{"location":"pages/debugging/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully learned the following:</p> <p>  How to set up, run, and inspect your Python code using the VS Code debugger </p> <p> How to use breakpoints and debugging features such as Step Into, Step Over, and Step Out</p> <p> How to effectively troubleshoot and refine your code during debugging</p>"},{"location":"pages/glossary/","title":"Glossary","text":"Instructions Term Definition <code>GitHub</code> Repository A storage space where project files and version history are kept. <code>GitHub</code> Local Repository A Git repository created on your own computer. <code>GitHub</code> Clone The process of copying a remote repository to your local machine. <code>GitHub</code> Commit The action of saving changes to your local repository. <code>GitHub</code> Push The process of uploading commits to a remote repository. <code>GitHub</code> Branch An independent line of development within a project, used when working on multiple versions simultaneously. <code>GitHub</code> Terminal The command-line interface within VS Code, where you can enter Git commands directly. <code>GitHub</code> README.md A document included in the repository that provides project information, introduction, and usage instructions. <code>Code Efficiently</code> Multi-Cursor A feature in VS Code that allows you to place multiple cursors in different parts of the document so you can edit several spots at once. <code>Code Efficiently</code> Quick Open A tool (accessed with Ctrl+P) that lets you quickly search for and open files by typing part of the file name. <code>Code Efficiently</code> Attribute A component of an HTML tag (such as class, id, or src) that provides additional information or properties about an element. <code>Debugging</code> Debugger A tool in VS Code that lets you run your code step by step so you can inspect its behavior and find errors. <code>Debugging</code> Breakpoint A marker you set on a line of code where the debugger will pause, allowing you to inspect variables and code flow. <code>Debugging</code> Step Into A debugging command that moves into a function call so you can see its internal operations. <code>Debugging</code> Step Over A debugging command that executes a function call without entering it, letting you quickly move to the next line. <code>Debugging</code> Inner function A function that is called from within another function. For example, in <code>result = add(result, x)</code>, the <code>add()</code> function is the inner function. <code>Debugging</code> Calling function The function that invokes (calls) another function. In the example above, <code>multiply()</code> is the calling function because it calls <code>add()</code>."},{"location":"pages/troubleshooting/","title":"Troubleshooting","text":"Instructions Symptoms Probable Cause Action <code>GitHub</code> \"Publish Branch\" button is not visible No local commits exist, VS Code is not connected due to GitHub authentication issues, or VS Code UI is changed Commit your changes first, then click \"Add Remote\" blue button in the popup at the bottom right, and press the ESC key.(The \"Publish Branch\" button could show up as soon as you commit your change.) <code>GitHub</code> Errors occur when using git commands in the terminal Git may not be installed, or the PATH setting is incorrect Ensure Git is properly installed and verify your PATH environment variable settings. <code>Code Efficiently</code> Selected text isn\u2019t updating across all instances. Not all matching instances were selected. Use \"Select All at Once\" (Ctrl+Shift+L) or ensure you repeatedly press Ctrl+D to include every match. <code>Code Efficiently</code> Some tabs remain open despite using tab closing commands. Unsaved changes or active unsaved file prompts may prevent closure. Save your files and try again, or close VS Code and reopen it if the issue persists. <code>Code Efficiently</code> Quick Open doesn\u2019t display the expected file. File name may be misspelled or the file is not in the current workspace. Double-check the file name and confirm the file\u2019s location in your project folder. <code>Code Efficiently</code> Changes with multi-cursor are applied unevenly. Inconsistent selection of matching text. Verify your selection by scrolling through the file and reapply the multi-cursor commands carefully. <code>Code Efficiently</code> VS Code feels slow or unresponsive while editing. Too many open files, heavy extensions, or large project size causing performance issues. Close unnecessary tabs, disable unused extensions, or restart VS Code to refresh performance. <code>Debugging</code> Breakpoint not being hit. Breakpoints set on incorrect or non-executable lines, or unsaved file changes. Save your file and ensure breakpoints are set on executable code lines (e.g., where functions are called). <code>Debugging</code> Debug panel does not open or display properly. The debug panel might be closed or the wrong view is active. Click the Run and Debug icon (bug icon) on the left sidebar or press Ctrl + Shift + D to open the correct panel. <code>Debugging</code> Variables are not showing correct or updated values. The debugger may not be paused at a breakpoint, or variables are out of scope. Pause your code using breakpoints and check the Variables section; consider adding variables to the WATCH panel for continuous monitoring. <code>Debugging</code> Step Into does not enter a function as expected. The debugger might be optimized to skip small functions or a breakpoint is interfering. Verify that your breakpoint is on the function call line; if needed, set an additional breakpoint inside the function to test Step Into. <code>Debugging</code> Unexpected output or behavior during debugging. Logical errors in the code or unexpected data changes in loops/functions. Step through the code line by line using Step Over/Step Into; inspect variable values in the Variables/WATCH panels to diagnose the issue."}]}